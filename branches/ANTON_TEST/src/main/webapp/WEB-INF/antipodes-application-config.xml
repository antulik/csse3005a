<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-2.5.xsd">


<!-- Add bean definitions here -->
	
	



</beans>


<!-- PLEASE SEE BELOW FOR SOME CONFIG EXAMPLES INCLUDING HIBERNATE
	
	<context:annotation-config />

 Weaves in transactional advice around @Transactional methods 
	<tx:annotation-driven transaction-manager="transactionManager" />

 The account manager service that can load accounts from the database 
	<bean id="accountManager" class="accounts.internal.HibernateAccountManager">
		<constructor-arg ref="sessionFactory" />
	</bean>

 A Hibernate SessionFactory for mapping Accounts and Restaurants from object to relation tables 
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingLocations">
			<list>
				<value>classpath:accounts/internal/Account.hbm.xml</value>
				<value>classpath:accounts/internal/Beneficiary.hbm.xml</value>
			</list>
		</property>
	</bean>

 Creates an in-memory "rewards" database populated with test data for fast testing 
	<bean id="dataSource" class="accounts.testdb.TestDataSourceFactory">
		<property name="testDatabaseName" value="rewards"/>
		<property name="schemaLocation" value="classpath:accounts/testdb/schema.sql"/>
		<property name="testDataLocation" value="classpath:accounts/testdb/test-data.sql"/>
	</bean>

 Drives transactions using Hibernate APIs when requested 
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
		
 Translates Hibernate exceptions to Spring Data Access Exceptions 
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
	
-->