<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xmlns:security="http://www.springframework.org/schema/security"
         xmlns:aop="http://www.springframework.org/schema/aop"
         xmlns:tx="http://www.springframework.org/schema/tx"
         xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
	        http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-2.0.1.xsd">

	<security:global-method-security secured-annotations="enabled">
    </security:global-method-security>

    <security:http auto-config="true" access-denied-page="/accessDenied.html" >
        <security:intercept-url pattern="/SAhome.html" access="ROLE_ADMIN"/>
        <security:intercept-url pattern="/TOhome.html" access="IS_AUTHENTICATED_REMEMBERED" />
        <security:form-login login-page='/TOlogin.html' authentication-failure-url='/loginFail.html'/>
        <security:logout logout-success-url='/search.html'/>
        <security:remember-me />
		<security:concurrent-session-control max-sessions="1" expired-url="/accessDenied.html" exception-if-maximum-exceeded="true"/>
    </security:http>


    <security:authentication-provider>
        <security:password-encoder hash="md5"/>
        <security:user-service>
            <security:user name="Admin" password="21232f297a57a5a743894a0e4a801fc3" authorities="ROLE_OPERATOR, ROLE_USER, ROLE_ADMIN" />
            <security:user name="Operator" password="4b583376b2767b923c3e1da60d10de59" authorities="ROLE_OPERATOR, ROLE_USER" />
        </security:user-service>
    </security:authentication-provider>

	
	
    <!-- the parent application context definition for the springapp application -->

    <!--<bean id="tourManager" class="edu.itee.antipodes.service.ExampleTourManager">
        <property name="tourDao" ref="tourDao"/>
    </bean>

   --><!--<bean id="tourDao" class="edu.itee.antipodes.repository.JdbcTourDao">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    -->
    <bean id="tourDao" class="edu.itee.antipodes.repository.TourDaoHibernate">
        <property name="sessionFactory">
            <ref bean="mySessionFactory" />
        </property>
    </bean>
    <bean id="tourDateDao" class="edu.itee.antipodes.repository.TourDateDaoHibernate">
        <property name="sessionFactory">
            <ref bean="mySessionFactory" />
        </property>
    </bean>
    <bean id="hibernateDao" class="edu.itee.antipodes.repository.HibernateSearch">
        <property name="sessionFactory">
            <ref bean="mySessionFactory" />
        </property>
    </bean>
    

    <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    -->
    <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
	    <property name="url" value="jdbc:oracle:thin:@oracle.students.itee.uq.edu.au:1521:iteeo"/>
	    <property name="username" value="csse3005a"/>
	    <property name="password" value="csse3005a"/>
  	</bean>
    
    
    <bean id="mySessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
	    <property name="dataSource" ref="myDataSource"></property>
	    <property name="mappingResources">
	      <list>
	         <value>edu/itee/antipodes/repository/Tour.hbm.xml</value>
	         <value>edu/itee/antipodes/repository/AccountUser.hbm.xml</value>
	         <value>edu/itee/antipodes/repository/Activity.hbm.xml</value>
	        <value>edu/itee/antipodes/repository/TourOperator.hbm.xml</value>
	        
	         
	      	 <value>edu/itee/antipodes/repository/TourDate.hbm.xml</value> 
	      </list>
	    </property>
	    <property name="hibernateProperties">
	      <value>
	        org.hibernate.dialect.OracleDialect
	      </value>
	    </property>
  	</bean>
    
<!-- might not required by Hibernate --><!--
    <bean id="propertyConfigurer" 
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:hibernate.properties</value>
            </list>
        </property>
    </bean>

    <bean id="transactionManager" 
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>

    <aop:config>
        <aop:advisor pointcut="execution(* *..ProductManager.*(..))" advice-ref="txAdvice"/>
    </aop:config>

    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="save*"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

-->
</beans>


<!-- PLEASE SEE BELOW FOR SOME CONFIG EXAMPLES INCLUDING HIBERNATE
	
	<context:annotation-config />

 Weaves in transactional advice around @Transactional methods 
	<tx:annotation-driven transaction-manager="transactionManager" />

 The account manager service that can load accounts from the database 
	<bean id="accountManager" class="accounts.internal.HibernateAccountManager">
		<constructor-arg ref="sessionFactory" />
	</bean>

 A Hibernate SessionFactory for mapping Accounts and Restaurants from object to relation tables 
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingLocations">
			<list>
				<value>classpath:accounts/internal/Account.hbm.xml</value>
				<value>classpath:accounts/internal/Beneficiary.hbm.xml</value>
			</list>
		</property>
	</bean>

 Creates an in-memory "rewards" database populated with test data for fast testing 
	<bean id="dataSource" class="accounts.testdb.TestDataSourceFactory">
		<property name="testDatabaseName" value="rewards"/>
		<property name="schemaLocation" value="classpath:accounts/testdb/schema.sql"/>
		<property name="testDataLocation" value="classpath:accounts/testdb/test-data.sql"/>
	</bean>

 Drives transactions using Hibernate APIs when requested 
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
		
 Translates Hibernate exceptions to Spring Data Access Exceptions 
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
	
-->